<?xml version="1.0" encoding="UTF-8"?>
<hb:RuleSet xmlns:hb="HANDBOOK"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="HANDBOOK ../XSD/handbook.xsd ">
	
	<hb:Rule UID="CNE_00100">
		<hb:RuleUID>CNE_00100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of active low signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Active low signal ends by a suffix: "_n".</hb:ShortDesc>
			<hb:LongDesc> By default, all signals are considered as active high signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00200">
		<hb:RuleUID>CNE_00200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-09-13</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of frequency in clock name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock frequency can be changed during the development (for power consumption reason...). In such a case, if the clock signal name contains frequency value, it can lead to major code modification to update this value, or lead to misunderstanding.
			</hb:Rationale>
			<hb:ShortDesc>The clock signal name does not contain the clock frequency value.</hb:ShortDesc>
			<hb:LongDesc>The clock relation for derivative clock, like mainclk_div2 for mainclk with a frequency divided by two, is a good way to show relation between clocks.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00300">
		<hb:RuleUID>CNE_00300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-06</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of pin number in signal name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Board layout optimization can lead to FPGA/ASIC pins swapping. ASIC/FPGA development often needs several targets with pinout mismatching. In such a case, if the VHDL code contains signal with FPGA/ASIC pins number information, it can lead to major code modification to update this value or lead to misunderstanding.</hb:Rationale>
			<hb:ShortDesc>Signal name does not contain FPGA/ASIC pin number value.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_00300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_00300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_00300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_00300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00400">
		<hb:RuleUID>CNE_00400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of testbench entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identification (suffix or prefix) for testbench entity improves the identification of which entity is the testbench of which entity.</hb:Rationale>
			<hb:ShortDesc>The suffix of testbench entity name is "_tb".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00500">
		<hb:RuleUID>CNE_00500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for signal naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When a unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a signal name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in signal name the following convention is applied: Name_Of_The_Signal.
The separation by uppercase (NameOfTheSignal) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00600">
		<hb:RuleUID>CNE_00600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for constant naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a constant name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a constant name the following convention is applied: Name_Of_The_Constant.
The separation by uppercase (NameOfTheConstant) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00700">
		<hb:RuleUID>CNE_00700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for process naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a process name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a process name the following convention is applied: Name_Of_The_Process.
The separation by uppercase (NameOfTheProcess) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00800">
		<hb:RuleUID>CNE_00800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for generic ports</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each words that composes a generic port name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in a generic port name the following convention is applied: Name_Of_The_Generic.
The separation by uppercase (NameOfTheGeneric) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_00900">
		<hb:RuleUID>CNE_00900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for custom type naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Each word that composes a custom type name are clearly identified with an underscore.</hb:ShortDesc>
			<hb:LongDesc>In order to separate word in a custom type name the following convention is applied: Name_Of_The_Customtype.
The separation by uppercase (NameOfTheCustomtype) is not used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01000">
		<hb:RuleUID>CNE_01000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of variable name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.
With this convention, designer will be able to track synthesis of variable and especially identify if a variable created some unwanted flip-flops.</hb:Rationale>
			<hb:ShortDesc>The name of a variable use "v_" prefix.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01000_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01000_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>v_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>		
	</hb:Rule>
	
	<hb:Rule UID="CNE_01100">
		<hb:RuleUID>CNE_01100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of ports direction inside entity port name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Indicating the port direction inside the port name improves readability.</hb:Rationale>
			<hb:ShortDesc>Entity port name uses prefix to determine the port direction.</hb:ShortDesc>
			<hb:LongDesc>Prefixes are: 
				"i_" for input port, 
				"o_" for output port, 
				"b_" for bidirectional port.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01200">
		<hb:RuleUID>CNE_01200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of process label</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating process label from other VHDL object improves readability.</hb:Rationale>
			<hb:ShortDesc>Process label name starts by a prefix: "P_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>p_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_01300">
		<hb:RuleUID>CNE_01300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of constant name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating constant object from other VHDL object improves readability.</hb:Rationale>
			<hb:ShortDesc>Constant name starts by a prefix: "c_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01400">
		<hb:RuleUID>CNE_01400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of generic port name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating generic port object from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Generic port name starts by a prefix: "g_".
			</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01400_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01500">
		<hb:RuleUID>CNE_01500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of custom type name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Differentiating custom type from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Custom type name starts by a prefix: "t_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01500_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	
	
	<hb:Rule UID="CNE_01600">
		<hb:RuleUID>CNE_01600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of package element</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A well defined prefix for package name improves identification of the origin of the element.</hb:Rationale>
			<hb:ShortDesc>The prefix of package element name is "pkg_".</hb:ShortDesc>
			<hb:LongDesc>Package elements considered are: the package name itself and all VHDL object declared and defined inside the package.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01600_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01600_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Prefix</hb:Position>
				<hb:Value>pkg_</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01700">
		<hb:RuleUID>CNE_01700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of rising edge detection signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that represents a rising edge of another one is: "_re".</hb:ShortDesc>
			<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a rising edge of a signal named My_Sig is My_Sig_re.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01700_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01700_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01700_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_01800">
		<hb:RuleUID>CNE_01800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of falling edge detection signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that represents a falling edge of another one is: "_fe".</hb:ShortDesc>
			<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a falling edge of a signal named My_Sig is My_Sig_fe.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_01800_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01800_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_01800_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_01900">
		<hb:RuleUID>CNE_01900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of registered signals</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that is clock delayed of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that is a registration of another one is: "_r".</hb:ShortDesc>
			<hb:LongDesc>The signal source is also included inside the signal name.
Thus, a signal that is clock delayed of a signal named My_Signal is My_Signal_r.
If a small number of registration of a same signal is used (less or equal to 3), SIGNAL_r can become SIGNAL_rx where x is the number of registration stage.
If a significant number of registration of a same signal is used, use an array for registration level instead of different signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_01900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_01900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_01900_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_01900_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02000">
		<hb:RuleUID>CNE_02000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of Finite State Machine</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying Finite State Machine (FSM) improves analysis of synthesis log files.</hb:Rationale>
			<hb:ShortDesc>FSM signal name uses prefix : "sm_".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_02000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02000_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_02000_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
			   <hb:ParamID>P1</hb:ParamID>
			   <hb:Position>Prefix</hb:Position>
			   <hb:Value>sm_</hb:Value>
		   </hb:StringParam>
	   </hb:RuleParams>
	</hb:Rule>

	<hb:Rule UID="CNE_02100">
		<hb:RuleUID>CNE_02100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of RTL architectures</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Meaningful architecture name helps managing simulation and implementation sources.</hb:Rationale>
			<hb:ShortDesc>VHDL architecture are of type Behavioral, RTL or Simulation.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_02100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02100_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_02100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		 	<hb:RuleParams>
				<hb:StringParam>
					<hb:ParamID>P1</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>Behavioral</hb:Value>
				</hb:StringParam>
				<hb:StringParam>
					<hb:ParamID>P2</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>RTL</hb:Value>
				</hb:StringParam>
				<hb:StringParam>
					<hb:ParamID>P3</hb:ParamID>
					<hb:Position>Contain</hb:Position>
					<hb:Value>Simulation</hb:Value>
				</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_02200">
		<hb:RuleUID>CNE_02200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of configuration entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00800</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identification of configuration entity name improves the identification of this file inside the project.</hb:Rationale>
			<hb:ShortDesc>The suffix of configuration entity name is "_cfg".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02300">
		<hb:RuleUID>CNE_02300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of clock name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00700</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. </hb:Rationale>
			<hb:ShortDesc>Clock signal keeps its name through hierarchy levels.</hb:ShortDesc>
			<hb:LongDesc>Clock signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the clock name the same between entity ports within a project.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_02300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_02300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_02400">
		<hb:RuleUID>CNE_02400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of reset name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00700</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. Moreover, renaming a reset signal can lead to break the reset tree.</hb:Rationale>
			<hb:ShortDesc>Reset signal keeps its name through hierarchy levels.</hb:ShortDesc>
			<hb:LongDesc>Reset signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the reset name the same between entity ports within a project.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_02400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_02400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_02400_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_02400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02500">
		<hb:RuleUID>CNE_02500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Length of entities name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact entity names ensures compact tree structure which improves readability inside the different software.</hb:Rationale>
			<hb:ShortDesc>Hierarchical level entity's names length is less than 20 characters.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02600">
		<hb:RuleUID>CNE_02600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Length of signals name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact signal names improve readability.</hb:Rationale>
			<hb:ShortDesc>Internal signal names length is less than 20 characters.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule><hb:Rule UID="CNE_02700">
		<hb:RuleUID>CNE_02700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-29</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of lines in file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact VHDL files reduce the complexity of the function defined and thus the risk of a bug.
Too many lines inside a VHDL file might depict a badly designed module or an architecture definition problem.</hb:Rationale>
			<hb:ShortDesc>The HDL architectural code have a limited number of lines set to 450.</hb:ShortDesc>
			<hb:LongDesc>HDL architectural code are the VHDL statements included between the begin statement and the end statement of the architecture. 
The definition area (for signals, constants components...) is not included in this area, nor are the comments lines.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>450</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	<hb:Rule UID="CNE_02800">
		<hb:RuleUID>CNE_02800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Software VHDL generator in header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Inserting information about the automatic tool used for VHDL file generation improves code review (as the reviewer doesn't want to check automatically generated code if not modified by hand) and reusability (as it can secure which software version has been used to create the file).</hb:Rationale>
			<hb:ShortDesc>Header of file includes references to the automatic VHDL files generator.</hb:ShortDesc>
			<hb:LongDesc>When a VHDL code file is generated automatically by a software then the header of this file includes information about the software used and its version.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc> 
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Softwares*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_02900">
		<hb:RuleUID>CNE_02900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>File name in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>File name in the header ensures that the header really applies to the current file and is not a copy/paste header.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the name of the file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*File name*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03000">
		<hb:RuleUID>CNE_03000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Creation date in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Creation date in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the file creation date.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Creation date*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03100">
		<hb:RuleUID>CNE_03100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Project name in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Project name in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the targeted project name.</hb:ShortDesc>
			<hb:LongDesc>The project name could be an ID or a code name for critical projects.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Project name*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03200">
		<hb:RuleUID>CNE_03200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Author in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Author in the header of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes author name of file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Author*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03300">
		<hb:RuleUID>CNE_03300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional description in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional description in the header of file allows peer reviewer to gain a minimum knowledge of the functionality without having to seek for design document.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a brief functional description of the entity.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Description*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03400">
		<hb:RuleUID>CNE_03400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Naming convention in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Naming convention summary in the header of file improves the understanding of the code by the peer reviewer.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the commonly used naming convention.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Naming conventions*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03500">
		<hb:RuleUID>CNE_03500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional limitation in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional limitation information reduces the possibility of introducing a bug when doing an update of the VHDL code.</hb:Rationale>
			<hb:ShortDesc>Header of file includes functional limitations of the entity.</hb:ShortDesc>
			<hb:LongDesc>The limitation could be an assumption taken by the designer regarding an unclear specification that leads to a specific implementation.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Limitations*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03600">
		<hb:RuleUID>CNE_03600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Current version number in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Current version of file in the header of the file allows traceability and reuse.</hb:Rationale>
			<hb:ShortDesc>Header of file includes current version of file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03700">
		<hb:RuleUID>CNE_03700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Author of modification(s) in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Listing of the author of the modification allows matching of author coding style profile with the produced VHDL during code analysis.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the name of the author of the modification(s).</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Author*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03800">
		<hb:RuleUID>CNE_03800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Version history in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
			<hb:ShortDesc>Header of file includes current and previous file version ID and date.</hb:ShortDesc>
			<hb:LongDesc>The header of the file includes a version tag (like number, letters..) with a modification date that identifies the current and previous version of the code.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version history*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_03900">
		<hb:RuleUID>CNE_03900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reason(s) of modification(s) in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Reason(s) of modification(s) in the header of file improves traceability and reuse.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the reason(s) of the modification(s).</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file. The reason could be, for example, a change in the specification document, a bug correction, an improvement...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04000">
		<hb:RuleUID>CNE_04000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional impact(s) of modifications in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional impact(s) in the versioning of file improves traceability.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the functional impacts of a modification.</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file. The functional impact could be, for example, a change of output signal activation from edge to level, a change of compatible technology (from Xilinx to Atmel FPGAs)...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04100">
		<hb:RuleUID>CNE_04100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional description of modifications in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02200</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a functional description of modifications.</hb:ShortDesc>
			<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>		
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04200">
		<hb:RuleUID>CNE_04200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Applicable license in header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Writing license in the header informs a third party reader what can be done with the file.</hb:Rationale>
			<hb:ShortDesc>Header of file includes a license.</hb:ShortDesc>
			<hb:LongDesc>The license could be a GNU public one, all right reserved to the company owner or any additional information regarding the reuse, the transfer of the file by a third party to an other one.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>		
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Licensing*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04300">
		<hb:RuleUID>CNE_04300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Company coding in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the company name developing the code.</hb:ShortDesc>
			<hb:LongDesc>If the VHDL is developed by a subcontractor, the name of this company will be written in the header.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Company*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04400">
		<hb:RuleUID>CNE_04400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Company owner of code in the header of file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
			<hb:ShortDesc>Header of file includes the company for which the code is developed.</hb:ShortDesc>
			<hb:LongDesc>The name of the company responsible for this FPGA is written in the header.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Company*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04500">
		<hb:RuleUID>CNE_04500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reset registers</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Registers which are not reset, will cause Post layout simulation mismatch. Thus these signals will have to be handled with a special attention. 
Isolating them from initialized signal improves identification of these signals while reading VHDL code, or within the netlist (if label are used for the process).</hb:Rationale>
			<hb:ShortDesc>Do not assign in the same process initialized signals with non-initialized ones.</hb:ShortDesc>
			<hb:LongDesc>Signal registers which are not initialized (by a reset signal) within a synchronous process are not located in the same process as initialized register signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>CNE_04500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_04500_bad.vhd</hb:BadExDesc>
			<hb:BadExample>CNE_04500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04600">
		<hb:RuleUID>CNE_04600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-07</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine coding style</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM are coded using an approved method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04700">
		<hb:RuleUID>CNE_04700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine single process based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM coding style use the one synchronous process method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04700_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04800">
		<hb:RuleUID>CNE_04800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine two processes based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM coding style use the two processes method.</hb:ShortDesc>
			<hb:LongDesc>FSM coding style use one synchronous process for state registration and one asynchronous process for states and outputs assertion.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04800_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_04900">
		<hb:RuleUID>CNE_04900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Use of clock signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock is one of the most critical signal in the design. Use of a clock signal for other input than the dedicated logic one can lead to moving the clock signal out of its low skew dedicated route. This can lead to timing mismatch on the device.</hb:Rationale>
			<hb:ShortDesc>Clock signal is not used inside combinational function like multiplexor or digital gate.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_04900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_04900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from CNE_04900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >CNE_04900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05000">
		<hb:RuleUID>CNE_05000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor coding style</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor are coded using an approved method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05100">
		<hb:RuleUID>CNE_05100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor single process based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_05000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor coding style uses an asynchronous process.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_05100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_05100_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05200">
		<hb:RuleUID>CNE_05200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiplexor direct assertion based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>CNE_05000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
			<hb:ShortDesc>Multiplexor coding style uses direct assertions.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from CNE_05200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >CNE_05200_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="CNE_05300">
		<hb:RuleUID>CNE_05300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Hierarchical level of entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited hierarchical levels between the top and the lowest level entity improves understanding of project.</hb:Rationale>
			<hb:ShortDesc>The number of nested entities should not be superior to 10.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05400">
		<hb:RuleUID>CNE_05400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2021-08-02</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of nested packages</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited number of nested packages improves understanding of project.</hb:Rationale>
			<hb:ShortDesc>The number of nested packages should not be superior to 3.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>2</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="CNE_05500">
		<hb:RuleUID>CNE_05500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Dimension of array</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_07000</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A limited number of dimension in array reduces complexity and improves readability.</hb:Rationale>
			<hb:ShortDesc>The use of arrays with dimension greater than 2 is forbidden.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00100">
		<hb:RuleUID>STD_00100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>VHDL object naming convention</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>VHDL Object naming convention improves readability and reuse.</hb:Rationale>
			<hb:ShortDesc>VHDL Object name definition uses an unique and specific naming convention.</hb:ShortDesc>
			<hb:LongDesc>This convention can address the naming of any VHDL objects like signals, variables, constants, generic, labels, modules, entity, etc.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00200">
		<hb:RuleUID>STD_00200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of clock signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The clock signal is critical. This signal needs to be easily found through the design.</hb:Rationale>
			<hb:ShortDesc>The clock signal name includes "clk" or "clock".</hb:ShortDesc>
			<hb:LongDesc>A signal is considered as a "CLOCK" whenever it is used to synchronize other signals to its rising or falling edge within a synchronous process with one of the following VHDL functions ('event, rising_edge or falling_edge), or when it is mapped on an IP clock input.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_00200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_00200_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure ></hb:Figure>
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clk</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P2</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clock</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_00300">
		<hb:RuleUID>STD_00300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of reset signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The reset signal is critical. This signal needs 
			to be easily found through the design.</hb:Rationale>
			<hb:ShortDesc>The reset signal name includes "rst", "reset" or "clr".</hb:ShortDesc>
			<hb:LongDesc>A signal is considered as a "RESET" whenever it is used inside a clocked-process to initialize signals value to a known state (most of the time zero) or mapped on a IP reset input.
If several reset signals are used, each reset is identified with a different name.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_00300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_00300_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>reset</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P2</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>rst</hb:Value>
			</hb:StringParam>
			<hb:StringParam>
				<hb:ParamID>P3</hb:ParamID>
				<hb:Position>Contain</hb:Position>
				<hb:Value>clr</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_00400">
		<hb:RuleUID>STD_00400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Label for process</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Labels improve readability of simulations, VHDL source code and synthesis logs.</hb:Rationale>
			<hb:ShortDesc>Processes are identified by a label.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_00400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_00400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_00400_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_00400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00500">
		<hb:RuleUID>STD_00500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Name of signal relation with behaviour</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A signal name related to its function improves the understanding of the code. It avoids miscomprehension by a peer reader and thus improves reliability of the code.</hb:Rationale>
			<hb:ShortDesc>The signal name clearly identifies its purpose.</hb:ShortDesc>
			<hb:LongDesc>A signal name is related to its functionality.
For example a control signal (chip-select, write enable, read/output enable), an address, a counter, an enable, a pulse, a flag, acknowledge, ...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00600">
		<hb:RuleUID>STD_00600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-01</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>VHDL file extension</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Same extension for each source file improves search and scripted automated actions.</hb:Rationale>
			<hb:ShortDesc>The extension of VHDL source file is .vhd</hb:ShortDesc>
			<hb:LongDesc>The extension of the VHDL file is ".vhd". The extension ".v" is reserved for the Verilog language. 
The extension ".vhdl" is not permitted.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>vhd</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_00700">
		<hb:RuleUID>STD_00700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Deleted</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of signal name</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>There is no need to change a signal name if this signal isn't modified.
Renaming important signals (like clock or reset) can lead to simulation mismatch. 
Moreover, changing a signal name which is not altered makes the understanding of the code more difficult.</hb:Rationale>
			<hb:ShortDesc>A non modified signal keeps its name through hierarchy levels.</hb:ShortDesc>
			<hb:LongDesc>Important signals like reset or clock have to keep their name across hierarchy. 
It is best practice for other signals not to change their name if they are not altered by any kind of logic.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Confusing</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00701">
		<hb:RuleUID>STD_00701</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-07-31</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Preservation of signal name inside an entity</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>There is no need to change a signal name if this signal isn't modified.
Renaming important signals (like clock or reset) can lead to simulation mismatch.
Moreover, changing a signal name which is not altered makes the understanding of the code more difficult.</hb:Rationale>
			<hb:ShortDesc>A non-modified signal keeps its name within its entity.</hb:ShortDesc>
			<hb:LongDesc>Critical signals like reset or clock have to keep their name. 
			It is best practice not to change signals name if they are not altered by any kind of logic. They should also keep their meaning (e.g. an enable should contain "en", a write "wr" etc.)</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00800">
		<hb:RuleUID>STD_00800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>File name convention</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>File name coherence improves search and scripted automated actions.</hb:Rationale>
			<hb:ShortDesc>File name uses an unique and specific naming convention within a design.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_00900">
		<hb:RuleUID>STD_00900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>File name of an entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00800</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>The match between file name and entity name improves the search for an entity inside a project.</hb:Rationale>
			<hb:ShortDesc>The file name for an entity VHDL file includes at least the entity name.</hb:ShortDesc>
			<hb:LongDesc>File name of an entity called MyEntity is :
			
				(Any characters)MyEntity(Any characters).vhd</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
		<hb:Rule UID="STD_01000">
		<hb:RuleUID>STD_01000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of entities per file</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>A single entity by file avoids compilation or synthesis ordering problems. It improves search for the file including a specific entity.</hb:Rationale>
			<hb:ShortDesc>Each source file contains only one VHDL entity.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01100">
		<hb:RuleUID>STD_01100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of architectures in files</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>When the design is synthesized, only one architecture is synthesized for each synthesized entity. Including only one architecture per file reduces a potential architecture selection error at synthesis level.</hb:Rationale>
			<hb:ShortDesc>Each VHDL file includes only one architecture per file.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>

	</hb:Rule>
	<hb:Rule UID="STD_01200">
		<hb:RuleUID>STD_01200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of statements per line</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>A single statement per line improves readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Each line includes only one statement.</hb:ShortDesc>
			<hb:LongDesc>A statement could be an affectation sequence, a conditional test, a declaration or a VHDL beginning sequence like case, process...).</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_01200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01200_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_01200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01300">
		<hb:RuleUID>STD_01300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of ports declaration per line</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>A single port declaration per line improves readability.</hb:Rationale>
			<hb:ShortDesc>Each line includes only one port definition or mapping.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_01300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01300_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_01300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01400">
		<hb:RuleUID>STD_01400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Instantiation of components</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Instantiation by name improves readability as there is not need to look to the entity definition to know the connection between port and signal.
It reduces risks of inconsistency between the entity definition and the component instantiation in case of entity modification.
			</hb:Rationale>
			<hb:ShortDesc>The instantiation of components is made by name.</hb:ShortDesc>
			<hb:LongDesc>Since instantiation is made by name, the instantiation by position is prohibited.
This rule does not apply to instantiations made within IP cores would they be coming auto generated from a tool or provided by any IP core provider.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01400_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_01400_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01400_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_01400_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>

	</hb:Rule><hb:Rule UID="STD_01500">
		<hb:RuleUID>STD_01500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Entity ports convention</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Ports declaration strategy allows readability and reuse.</hb:Rationale>
			<hb:ShortDesc>Entity ports are organized with a dedicated convention.</hb:ShortDesc>
			<hb:LongDesc>This convention deals with the way the ports of an entity are sorted: by direction, interface, special signals...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01600">
		<hb:RuleUID>STD_01600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Entity port sort</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_01500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Ports grouped by external interfaces improves readability.</hb:Rationale>
			<hb:ShortDesc>Entity ports are organized by interface.</hb:ShortDesc>
			<hb:LongDesc>Entity ports are grouped by external interfaces.
Within an interface group, ports could then be sorted by direction (input, output, bidirectional).</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_01600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01600_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_01600_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>

	</hb:Rule><hb:Rule UID="STD_01700">
		<hb:RuleUID>STD_01700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Entity special ports</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_01500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>These special signals are important for the understanding of the module functionalities. Thus gathering them at the beginning of an entity improves readability.</hb:Rationale>
			<hb:ShortDesc>Special ports are the first group of an entity.</hb:ShortDesc>
			<hb:LongDesc>Special input ports like clock(s), reset and global enable are the first to be written in an entity.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_01700_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01700_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_01700_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01800">
		<hb:RuleUID>STD_01800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Primitive isolation</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Specific or primitive IP cores are technology dependent. Isolating these IP improves technology retargeting.</hb:Rationale>
			<hb:ShortDesc>Primitive are isolated in a wrapper entity defined in a dedicated VHDL file.</hb:ShortDesc>
			<hb:LongDesc>When an IP core is used (memory inference/instantiation, primitives instantiations like PLLs, etc), then the generated HDL code is manufacturer/technology specific.
It is best practice to separate this code from the general HDL code, which is not specific to the manufacturer/technology, by creating a	more generic wrapper which contains all those specific HDL codes.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_01900">
		<hb:RuleUID>STD_01900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Indentation of source code</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Proper indentation improves readability.</hb:Rationale>
			<hb:ShortDesc>VHDL source file is indented.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Info</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_01900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_01900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_01900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_01900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_02000">
		<hb:RuleUID>STD_02000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Indentation style</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_01900</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Text editors display hard tabs differently. When a designer uses only spaces, the sources code formatting is independent of the text editor used.</hb:Rationale>
			<hb:ShortDesc>Indentation is made by a fixed number of blank spaces instead of tabulation.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="STD_02100">
		<hb:RuleUID>STD_02100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Compactness of VHDL source code</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Hand coded VHDL source files limited in size keeps the module less complicated and thus easier to validate and read.
Moreover, some tools do not handle well too many characters per lines.</hb:Rationale>
			<hb:ShortDesc>Hand coded VHDL source files are limited in size.</hb:ShortDesc>
			<hb:LongDesc>File limitation strategy might be implemented with a limit of lines, name characters, entity's names length, compact signal name, etc. </hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_02200">
		<hb:RuleUID>STD_02200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-28</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Version control in header of file</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Version control ensures that development history is saved so that a new developer could use it and avoid previous mistakes or understand previous choices.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
			<hb:ShortDesc>VHDL file includes information that tracks and provides control over changes to source code.</hb:ShortDesc>
			<hb:LongDesc>The revision control mechanism is written in the header file which then includes:
			  - Version Tag (number, letter...),
			  - Author,
			  - Date of modification,
			  - Author of modification,
			  - Description of modification,
			  - Reason of modification,
			  - Impacts of modification,
			  - The file creation date,
			  - Current version number.
Large VHDL project could use version control software (like SVN). If this is the case a tag identifying the version is also included.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_02200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_02200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_02200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_02200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	    <hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Version*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_02300">
		<hb:RuleUID>STD_02300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Copyright information in the header of file</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>These information ensure that the VHDL file is not reused or disclosed if it is not allowed.</hb:Rationale>
			<hb:ShortDesc>Header of the file includes copyright information.</hb:ShortDesc>
			<hb:LongDesc>The copyright information includes:
			  - A license restriction (if needed),
			  - The name of the company owning the rights,
			  - The VHDL designer company if the design is subcontracted.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Security</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Copyright*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_02400">
		<hb:RuleUID>STD_02400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Creation information in the header of the file</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>A common header format which gathers all important information for each HDL file improves the understanding of VHDL background context of the developed module.</hb:Rationale>
			<hb:ShortDesc>HDL file includes a header with specific information.</hb:ShortDesc>
			<hb:LongDesc>Typical information that can be included in the header are: file name, author, creation date, project name, software context.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Creation*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_02500">
		<hb:RuleUID>STD_02500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2014-12-01</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Functional information in the header of file</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Versioning</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Functional information in the file header improves understanding of the code function while reviewing or reusing it.</hb:Rationale>
			<hb:ShortDesc>Header of file includes information about code functionality.</hb:ShortDesc>
			<hb:LongDesc>Functional description could be, for example, a short description of the file functions, its limitations or a description of the naming convention used.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:StringParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Position>Equal</hb:Position>
				<hb:Value>*Description*</hb:Value>
			</hb:StringParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_02600">
		<hb:RuleUID>STD_02600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-17</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>IEEE libraries preference</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Reuse</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Using libraries standardized by the IEEE improves code portability.
"std_logic_arith", "std_logic_signed" and "std_logic_unsigned" libraries are not standardized.</hb:Rationale>
			<hb:ShortDesc>Use the following IEEE libraries : "std_logic_1164" and "numeric_std"</hb:ShortDesc>
			<hb:LongDesc>Do not use deprecated Synopsys libraries "std_logic_arith", "std_logic_signed" and "std_logic_unsigned" except if you are targeting specifically a Synopsys synthesizer (like for an ASIC for instance).
Nevertheless, never mix these two library families.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="STD_02700">
		<hb:RuleUID>STD_02700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-27</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Default language</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Reuse</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>English language usage allows readability and reuse by a broader group (including an international designer community).</hb:Rationale>
			<hb:ShortDesc>Header, instructions and comments are written in English.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_02800">
		<hb:RuleUID>STD_02800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Comment strategy</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Reuse</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Relevant comments increase readability of the code.</hb:Rationale>
			<hb:ShortDesc>The VHDL code includes comments.</hb:ShortDesc>
			<hb:LongDesc>The VHDL code comments need to explain the purposes and objectives of the code as much as possible, but should not describe it.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>40</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_02900">
		<hb:RuleUID>STD_02900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Comments for entity ports</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02800</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Reuse</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Comments on ports allow the IP integrator to quickly identify port connections when instantiating the modules.</hb:Rationale>
			<hb:ShortDesc>Each entity port is commented with a short functional description.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_02900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_02900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_02900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_02900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03000">
		<hb:RuleUID>STD_03000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Comments for objects declaration and statements</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02800</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Reuse</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Accurate and up-to-date comments increase readability, reusability and understanding</hb:Rationale>
			<hb:ShortDesc>Each process, group of instructions and objects declaration are commented</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03000_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03000_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="STD_03100">
		<hb:RuleUID>STD_03100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Dead VHDL code</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Traceability</hb:Category>
			<hb:SubCategory>Requirement</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Deleting unnecessary portions of code improve code coverage results and make the design more robust.</hb:Rationale>
			<hb:ShortDesc>Unnecessary portions of code are deleted</hb:ShortDesc>
			<hb:LongDesc>Unused declared signals and constants are deleted. Inactive or wrong code is deleted. Pieces of code commented out doesn't appear in HDL sources.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Vulnerability</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03100_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03200">
		<hb:RuleUID>STD_03200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unused output ports components management</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>I/O</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The keyword "open" is preferred to the connection of an unused output port to a dummy signal which causes implicit net connection during synthesis.</hb:Rationale>
			<hb:ShortDesc>Unused output ports are mapped with the keyword "open".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Pittfall</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03200_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03300">
		<hb:RuleUID>STD_03300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-17</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Buffer port type</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>I/O</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>VHDL authorize entity I/O to be of type in, out, inout or buffer. Buffer authorizes an output of an entity to be read inside the entity.
Manufacturers of synthesis software do not recommend "buffer" type usage because buffers may give some problems during synthesis.</hb:Rationale>
			<hb:ShortDesc>"Buffer" port in an entity is forbidden.</hb:ShortDesc>
			<hb:LongDesc>Reading an output signal inside an entity can be achieved by creating an internal signal.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Pittfall</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03300_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03400">
		<hb:RuleUID>STD_03400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Top level ports</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>I/O</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Top level entity ports are mapped on real component pins. Thus, restrictions apply to be sure that these VHDL pins map flawlessly to real pins.</hb:Rationale>
			<hb:ShortDesc>Top level ports include approved types.</hb:ShortDesc>
			<hb:LongDesc>When designing the TOP level, the designer uses only types which are allowed. Every types which are not in the allowed list are prohibited to use.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03500">
		<hb:RuleUID>STD_03500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Record type for top level entity ports</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_03400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>I/O</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Top level entity ports are mapped on real component pins. Thus, restrictions apply to be sure that these VHDL pins map flawlessly to real pins.</hb:Rationale>
			<hb:ShortDesc> Record type is forbidden for top level entity ports.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03600">
		<hb:RuleUID>STD_03600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reset sensitive level</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>In a FPGA, the reset signal is usually a high fan-out signal routed using a dedicated global signal routing track. Using both levels of the reset signal to asynchronously reset the flip-flops of the design results in the synthesis of the reset signal itself and its inverted version, which leads to the usage of 2 global dedicated routing tracks versus a single one, with one of the reset signal passing through an inverter in the FPGA fabric rendering the reset recovery timings closure harder to meet for the FPGA EDA tools.</hb:Rationale>
			<hb:ShortDesc>Every synchronous process uses the same reset	activation level.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03600_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03600_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03700">
		<hb:RuleUID>STD_03700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reset assertion and deassertion</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Synchronous design uses the principle that all registers in a same clock domain leave the reset state at the same time. 
Asynchronous assertion ensures that the design could be reset even if the input clock is not yet functional.
Synchronous deassertion ensures that the component startup sequence is reproducible and that the clock is ready and stable before the deassertion of the reset inside the component.
Doing so, if there is a glitch on the external reset, it will produce an internal reset that is active at least one clock period and guarantees a correct reset of the internal logic.
</hb:Rationale>
			<hb:ShortDesc>Internal reset is asserted asynchronously and deasserted synchronously.</hb:ShortDesc>
			<hb:LongDesc>If several clock domains are used then several reset signals are created to be deasserted synchronously with each targeted clock domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03700_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_03700.svg" height="250px"
				width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03800">
		<hb:RuleUID>STD_03800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Synchronous elements initialization</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Initialization of synchronous elements contribute to deterministic reset behaviour and simulation match between functional and Post-Place and Route.</hb:Rationale>
			<hb:ShortDesc>All synchronous elements (such as registers, counters and FSM states...) are initialized by a reset.</hb:ShortDesc>
			<hb:LongDesc>Sometimes special features do not stand for reset (like datapath, divisor, MAC IP...), this have to be justified.

For example, if all sequencing registers are reset, it is not mandatory to reset registers of the datapath.
Indeed, manufacturers recommend removing resets or changing them to synchronous where possible.
Benefits of removing resets :
- Fewer timing paths
- Performance
- Routing
- Inferencing
Benefits of changing resets to synchronous :
- Improved use of dedicated register functions
- More flexible register placement
- More predictable timing and circuit operation</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03800_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03800_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03800_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_03900">
		<hb:RuleUID>STD_03900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>State machine type definition</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Enumerated type to encode FSM states allows readability and reuse.</hb:Rationale>
			<hb:ShortDesc>FSM states are encoded using enumerated type.</hb:ShortDesc>
			<hb:LongDesc>Other type of state machine definition like vectors or integer are forbidden.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_03900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_03900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_03900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_03900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04000">
		<hb:RuleUID>STD_04000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-20</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>State machine case enumeration completion</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>State completion ensures deterministic behaviour between simulation and final design.</hb:Rationale>
			<hb:ShortDesc>VHDL code addresses all the defined states of the state machine.</hb:ShortDesc>
			<hb:LongDesc>When all cases statement are not explicitly addressed in the VHDL code, an extra "when others" case will be added.
"when others" instruction handles the default condition when none of the previous case statements are met.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_04000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_04000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_04000_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_04000_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04100">
		<hb:RuleUID>STD_04100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock domain crossing</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Changing clock domains can lead to data incoherency or data loss due to metastability. These effects will mainly be seen on the integrated system. 
The use of a validated clock domain change mechanism reduces the risk of discrepancies.</hb:Rationale>
			<hb:ShortDesc>All data exchanges between different clock domains are done with specific approved mechanism.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04200">
		<hb:RuleUID>STD_04200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock domain crossing handshake based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_04100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>Using the proper clock domain crossing technique to pass a data bus from one clock domain to another is critical in order to ensure a proper behaviour of the design under any circumstances.
When the data to synchronize is a data bus or can be considered as one, and that the high latency of the handshake based synchronizer can be tolerated, then dual handshake synchronizer technique is appropriate.</hb:Rationale>
			<hb:ShortDesc>Clock domain crosses uses a handshake based synchronizer.</hb:ShortDesc>
			<hb:LongDesc>In the source clock domain, when the source data is ready for synchronization, a "transmit request" control signal is activated. The source data stability has to be guaranteed until reception of a "receipt acknowledge".
In the destination clock domain, the "transmit request" control signal is synchronized using a double or triple register synchronization technique.
It is then used to sample the data to synchronize in the destination clock domain. A "receipt acknowledge" is then sent back to the source clock domain. In the source clock domain, the "receipt acknowledge" is synchronized using a double or triple register synchronization technique.
The source data can now be changed and another synchronization handshake can be initiated.
"transmit request" and "receipt acknowledge" data stability for the m-registers synchronizers:
			  - data values must be stable for m+1 destination clock cycles.
Source data stability:
			  - The source data must be present when "transmit request" is asserted	on the destination and remain stable until the "receipt acknowledge" is generated.
The source clock domain should continue to assert the "transmit request" control signal until "receipt acknowledge" is asserted at the source clock domain.
The sender should not assert a new "transmit request" until the acknowledgement for the previous transfer is deasserted in the source clock domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_04200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_04200_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_04200.svg" height="450px" width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04300">
		<hb:RuleUID>STD_04300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock domain crossing FIFOs based</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_04100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>Using the proper clock domain crossing technique to pass a data bus from one clock domain to another is critical in order to ensure a proper behaviour of the design under any circumstances.
When the data to synchronize is a data bus or can be considered as one, that the synchronization rate is fast, and that the high latency of a handshake based synchronizer cannot be tolerated, then dual clock FIFO synchronizer technique (if available in the component) is appropriate.
The FIFO implementation ensures data order and data content preservation.</hb:Rationale>
			<hb:ShortDesc>Clock domain crossing uses a dual clock FIFO based synchronizer.</hb:ShortDesc>
			<hb:LongDesc>There are many "dual clock FIFO synchronizer" implementation variations. The FIFO size has to be carefully chosen to cope with clock frequencies differences, read and write rates, read and write methods (continuous vs burst).
As a general rule, the data is written into a dual-port RAM block from the source clock domain and the RAM is read in the destination clock domain.
Gray-coded read and write pointers are passed into the alternate clock domain (using two m-registers synchronizers) to generate the following most common status flags:
			- FIFO full: all available memory locations of the FIFO are used. No write can be applied to the FIFO.
			- FIFO empty: There is no data available in the FIFO. No read can be applied to the FIFO.
			- FIFO underflow: a FIFO read was issued while the FIFO was empty. A FIFO reset is now required to recover from that state unless auto FIFO underflow recovery was designed and enabled.
			- FIFO overflow: a FIFO write was issued while the FIFO was full. A FIFO reset is now required to recover from that state unless auto FIFO overflow recovery was designed and enabled.
The following status flags can also be made available:
			- FIFO almost full: FIFO is becoming full. The number of available elements in the FIFO is above a given threshold.
			- FIFO almost empty: FIFO is becoming empty. The number of available elements in the FIFO is below a given threshold.
Here is a list of possible assertion checks for a FIFO design:
			- a FIFO is never written into when full: Check that there is no FIFO overflow,
			- a FIFO is never read when empty: Check that there is no FIFO underflow,
			- a FIFO preserves the data order,
			- a FIFO preserves the data value.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_04300.svg" height="250px" width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04400">
		<hb:RuleUID>STD_04400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-09-09</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock management module</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>A dedicated clock module is essential to design for reuse and design portability, while improving clocks identification and management throughout the design.
Such a practice isolates all vendor-specific clocking	elements such as PLLs, clock multiplexers and clock buffers in a single instance that can be easily replaced to target another technology from the same vendor or not. Thereby, a FPGA prototype design can be easily ported to another FPGA family or an ASIC technology.</hb:Rationale>
			<hb:ShortDesc>All global clocks are generated in a single dedicated module.</hb:ShortDesc>
			<hb:LongDesc>Any clock element inserted in any clock path is instantiated inside the same design entity. Clock elements are clock buffers, clock multiplexers, PLLs, DCMs, fractional dividers, gapped clock logic, enabled clock logic...</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_04400.svg" height="400px" width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04500">
		<hb:RuleUID>STD_04500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of Clock Reassignment</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Reassignement of clock signal can lead to simulation mismatch regarding the Place and Route design. Search for simulation and delta cycle topic.</hb:Rationale>
			<hb:ShortDesc>Do not reassign a clock in a concurrent statement.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Bug</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_04500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_04500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_04500_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_04500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04600">
		<hb:RuleUID>STD_04600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock domain number in the design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Reducing the number of clock domain in a design is critical in order to keep the number of clock domain crossing resolutions to few manageable cases.
Doing so limits the chance for clock domain crossing design issues, limits the number of nets not covered with static timing analysis and simplifies greatly the synthesis scripts.
For those reasons, usage of a single clock domain is strongly recommended.</hb:Rationale>
			<hb:ShortDesc>One clock domain is used in the design.</hb:ShortDesc>
			<hb:LongDesc>The number of timing domain is reduced as far as reasonably possible : one single clock domain design is the target.
When a slower clock version is needed, use an enable signal instead of a derived clock to throttle the resulting clock rate.
When a faster clock version is needed, promote that faster clock as the single clock domain used if the design and or re-design consequences are not prohibitive prior to creating a derived clock domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure fileref="STD_04600.svg" height="450px" width="450px" />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>1</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_04700">
		<hb:RuleUID>STD_04700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Number of clock domains per modules</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Separating the clock domains in the design architecture greatly improves the clock domains identifications, the data flow understanding and most importantly allows fast tracing of the clock domain crossing signals that need special design and static timing analysis considerations while allowing better design reuse.</hb:Rationale>
			<hb:ShortDesc>Each module in the design handle only one clock.</hb:ShortDesc>
			<hb:LongDesc>Entity that is linked between entities can have several clocks at input but do not manage processes on those clocks.
The only module that can handle several clocks are the clock management module and the reset management module.
Other modules can include different clocks but the data exchange between them is done through the approved clock domain crossing module.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>LET</hb:Relation>
				<hb:Value>1</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
	
	<hb:Rule UID="STD_04800">
		<hb:RuleUID>STD_04800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Clock edge sensitivity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Clocking</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Usage of a single clock sensitive edge allows efficient timing analysis.
				Using only one edge of a clock allows to avoid over-constraining static timing analysis. Moreover, the design isn't duty cycle sensitive.
			</hb:Rationale>
			<hb:ShortDesc>An unique single sensitive edge is used to clock all flip-flop in the same clock domain.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_04900">
		<hb:RuleUID>STD_04900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Edge detection best practice</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Synchronous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Flip-Flops clock input is dedicated to a clock signal. Thus, using it as a way to detect a signal edge (by using rising_edge(...) or 'event attribute) may lead to the creation of a new clock domain for each signal edge detection implemented in the design: this is not the purpose.</hb:Rationale>
			<hb:ShortDesc>Synchronous mechanisms are used for signal edge detection.</hb:ShortDesc>
			<hb:LongDesc>A specific mechanism is used in order to detect rising or falling edge input signal.
This mechanism involves a real design clock, at least one D Flip-Flop to delay the signal, and combinational gate(s) to select the edge.
			</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_04900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_04900_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_04900.svg" height="450px" width="480px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05000">
		<hb:RuleUID>STD_05000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Sensitivity list for synchronous processes</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Synchronous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Synchronous process with any extra signals added to sensitivity list may become asynchronous.
Moreover, this practice risks adding combinational blocks on clock and reset trees.</hb:Rationale>
			<hb:ShortDesc>A synchronous process needs only the clock and reset signals in its sensitivity list.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05000_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_05000_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_05000_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05100">
		<hb:RuleUID>STD_05100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-09-16</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Metastability management</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Synchronous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Synchronizing each asynchronous input signal to each clock domain where it is used is critical in order to guaranty a proper behaviour of the design under any circumstances. Thus, an asynchronous signal is synchronized to the clock domain where it is used using a two or three Flip-Flops synchronizer.
Doing so ensures that all the Flip-Flops of the sampling timing domain samples the very same value of a given asynchronous signal, as this techniques resolves the metastability issue, caused by setup or hold time violations, at the synchronizer level.
Not doing so causes issues in Finite State Machines. For example, the FSM can see the condition to exit a state true while the condition to enter the next state may still be seen false. This might lead the FSM to a wrong state transition. In the case of one hot state encoded FSMs this issue may cause the FSM to have no more active state which causes the FSM to fail.</hb:Rationale>
			<hb:ShortDesc>Asynchronous input signals are synchronized with at least a two Flip-Flops synchronizer.</hb:ShortDesc>
			<hb:LongDesc>Asynchronous inputs signals are defined as the following : 
signals generated without clock and signals generated in another time domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Pittfall</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05100_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05100.svg" height="150px"
				width="450px" />
		</hb:RuleDesc>
		<hb:RuleParams>
			<hb:IntParam>
				<hb:ParamID>P1</hb:ParamID>
				<hb:Relation>E</hb:Relation>
				<hb:Value>2</hb:Value>
			</hb:IntParam>
		</hb:RuleParams>
	</hb:Rule>
		
	<hb:Rule UID="STD_05200">
		<hb:RuleUID>STD_05200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Yosys-ghdl</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Output signal registration</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Synchronous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>All outputs of an integrated circuit are coming from output registers whenever possible and from regular registers when not possible. The clock used is the same as the one used in the signal source clock domain.
Doing so suppresses all glitches on the outputs	whenever a signal level change occurs and enables control of the clocks to outputs delays of the circuit so that the time borrowed by any signal to propagate from its respective launching clock edge to its assigned device output is controlled and less than a given maximum allowed time.
With controlled clocks to outputs delays, enough PCB propagation time and inputs to clocks delays is left for those outputs to be captured using the same clock in a remote device.</hb:Rationale>
			<hb:ShortDesc>All outputs signal from a top level entity are registered.</hb:ShortDesc>
			<hb:LongDesc>Combinational outputs at top level are forbidden. Those outputs belong to the timing domain in which they are generated at top level. Whenever it is possible, use I/O blocks register instead of internal register for top level outputs.
Unless specified and approved, a combinational signal is never used directly as a top level output.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05200.svg" height="450px"
				width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05300">
		<hb:RuleUID>STD_05300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Sensitivity list for combinational processes </hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>If an input signal is missing in the sensitivity list, there might be a mismatch between VHDL simulation and the programmed FPGA matrix.</hb:Rationale>
			<hb:ShortDesc>Combinational processes have a sensitivity list including all inputs signals which are read.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05300.svg" height="450px"
				width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05400">
		<hb:RuleUID>STD_05400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-13</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of internal tristate</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Best design practices call for design reuse. Inferring internal tristate goes against it as not every FPGA and every ASIC include this functionality.
For that reason, it is prohibited.</hb:Rationale>
			<hb:ShortDesc>Internal tristates drivers are forbidden in VLSI.</hb:ShortDesc>
			<hb:LongDesc>When an internal tristate solution would satisfy the functionality to model, use a multiplexer-based solution instead.
Do not hesitate to pipeline the structure according to the targeted clock frequency and targeted technology.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05400.svg" height="400px" width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05500">
		<hb:RuleUID>STD_05500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-09-06</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of latches</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Inferring latches in synchronous designs is not a good design practice. Even though a behavioural simulation shows that the design simulates correctly, it is only after a great deal of effort in synthesis, place and route, static timing analysis, and even back annotated simulations that the design executes correctly on the targeted technology. This is because of the clock and signals timing delays which very easily lead to a data crossing two latches at once when only one at once is desired.</hb:Rationale>
			<hb:ShortDesc>The design does not use latches on purpose.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_05500_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_05500_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05500.svg" height="600px"
				width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05600">
		<hb:RuleUID>STD_05600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of combinational feedbacks</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Inferring Combinatorial feedbacks is not a good design practice. Even though a behavioural simulation shows that the design simulates correctly, there is no guaranty that the design works properly on the targeted component. 
Indeed, at every step of the way through the backend, the timing loops provoked by these combinatorial feedbacks are broken so that the tool can proceed further. With doing so, all of the timing arcs passing through those combinatorial feedbacks are not analyzed, leaving room for all sorts of timing violations thus a non working component.</hb:Rationale>
			<hb:ShortDesc>The design does not use combinatorial feedback.</hb:ShortDesc>
			<hb:LongDesc>When synthesis reports that a timing loop is broken in a combinational process, check your design for asynchronous signals appearing on both sides of a combinational assignment statement. Once isolated break the timing loop.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_05600_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_05600_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05600.svg" height="300px"
				width="450px" />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05700">
		<hb:RuleUID>STD_05700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of gated clocks</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock gating objective is to reduce the power consumption of a synchronous design. Freezing the clock reduce the power consumption from transistors toggle and clock tree propagation. This great power saving comes at the expense of the design of the gated clock logic, which can be easily implemented with dedicated gates inside an ASIC but might not be available inside a FPGA.
Thus, gated clock usage is prohibited inside FPGA.</hb:Rationale>
			<hb:ShortDesc>The design does not use gated clock.</hb:ShortDesc>
			<hb:LongDesc>Intentionally inferring gated clock in FPGA is prohibited; use the Flip-Flops clock enable instead.
When the synthesis reports that a gated clock was created, turn off the synthesis tool "auto convert gated clock" option, so that the tool uses the Flip-Flops clock enable instead.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05700_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05700_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_05700_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_05700_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure fileref="STD_05700.svg" height="300px"
				width="450px" ></hb:Figure>
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_05800">
		<hb:RuleUID>STD_05800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Use of VHDL types in RTL design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>VHDL language provides many different types. These types do not all have a physical match with a physical component. Some of them are only used in simulation.</hb:Rationale>
			<hb:ShortDesc>Only synthesizable types are allowed in RTL design.</hb:ShortDesc>
			<hb:LongDesc>Only the following types are allowed for RTL design : std_logic, std_logic_vector, integer, signed, unsigned and record/array of those.
Enumerate is allowed for FSMs and boolean for generics.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
		
	<hb:Rule UID="STD_05900">
		<hb:RuleUID>STD_05900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Range for integers</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Usage of "range" keyword constrains synthesis optimization effort. It avoids mismatches between simulation and board.</hb:Rationale>
			<hb:ShortDesc>Integer type are constrained using the keyword "range".</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_05900_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_05900_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_05900_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_05900_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06000">
		<hb:RuleUID>STD_06000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-12</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Range direction for arrays</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>This is a convention to improve use of arrays.</hb:Rationale>
			<hb:ShortDesc>"Array" type declaration uses increasing index with "to" keyword.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06000_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_06000_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc ></hb:FigureDesc>
			<hb:Figure ></hb:Figure>
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06100">
		<hb:RuleUID>STD_06100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>7</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-07-12</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Range direction for std_logic_vector</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This is a convention to improve use of std_logic_vector.</hb:Rationale>
			<hb:ShortDesc>"Std_logic_vector" type declaration uses decreasing index with "downto" keyword.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_06100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_06100_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_06100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="STD_06200">
		<hb:RuleUID>STD_06200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Management of numeric values</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Using constant instead of hard coded numeric value inside the VHDL code improves the identification of these values. Thus, modification of these values (if needed) will be easier.</hb:Rationale>
			<hb:ShortDesc>Use VHDL constant as much as possible instead of hard coded numeric values.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_06200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_06200_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_06200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06300">
		<hb:RuleUID>STD_06300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of variables in RTL design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Type</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>VHDL signal is the object used to describe an electrical wire connection or a register. VHDL signal is the way to have a communication between VHDL processes, whereas variable were meant to store a value inside a VHDL process. A variable is assigned without any delay whereas signal assignment lead to an event after a delta delay. This difference can induce design errors or simulation and synthesis mismatch</hb:Rationale>
			<hb:ShortDesc>Variables are prohibited in the RTL design.</hb:ShortDesc>
			<hb:LongDesc>Only signal type is allowed in RTL design.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Info</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06400">
		<hb:RuleUID>STD_06400</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Error mitigation strategy</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>Spatial</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reliability</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Error mitigation can be made at VHDL design level. If it is expected to be done at this level, the mechanisms have to be approved.</hb:Rationale>
			<hb:ShortDesc>All mitigation mechanisms are done with a specific approved mechanism.</hb:ShortDesc>
			<hb:LongDesc>In order to mitigate errors due to radiation, mechanisms (EDAC, ECC, parity, srubbing, triplication...) can be implemented in the FPGA if needed.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Vulnerability</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Complex</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06500">
		<hb:RuleUID>STD_06500</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Counters end of counting</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_06400</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reliability</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>This feature allows the synthesizer to optimize the counter in a way that if the counted value pass over the final one the end of counter is still reached. The result of the synthesis can sometimes be more efficient than with the use of "=".</hb:Rationale>
			<hb:ShortDesc>Use non strict comparison (&lt;= and &gt;=) for end of counting comparison.</hb:ShortDesc>
			<hb:LongDesc>When comparing a cyclic counter value against its end of count value, non strict comparison is used instead of strict comparison.
For an up counter, use the greater than or equal to (&gt;=) comparison sign instead of the equals sign (=).
For a down counter, use the less than or equal (&lt;=) comparison sign instead of the equals sign (=).</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Vulnerability</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06500_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_06500_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_06500_bad.vhd</hb:BadExDesc>
			<hb:BadExample >STD_06500_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06600">
		<hb:RuleUID>STD_06600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Dimension of comparison elements</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reliability</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Comparison of two std_logic_vector signal of different size can lead to unexpected result.</hb:Rationale>
			<hb:ShortDesc>Two comparison elements must have the same type and dimension.</hb:ShortDesc>
			<hb:LongDesc>Using of unsigned or signed type to insure comparison between two elements is a best practice.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06600_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_06600_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_06600_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_06600_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06700">
		<hb:RuleUID>STD_06700</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-17</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of wait statement in RTL design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>"Wait" instructions and "after" clauses are forbidden inside the RTL design because they are not synthesizable.</hb:Rationale>
			<hb:ShortDesc>The "wait" statement and "after" clause are forbidden in RTL design.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06800">
		<hb:RuleUID>STD_06800</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of signal initialization in declaration section</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Signals default value, in declaration section, is usually not synthesizable.</hb:Rationale>
			<hb:ShortDesc>Signals are never initialized to a default value when declared.</hb:ShortDesc>
			<hb:LongDesc>Signals are not initialized to a default value in declaration level but only during a reset sequence.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_06800_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_06800_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_06800_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_06800_bad</hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_06900">
		<hb:RuleUID>STD_06900</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>Java</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-06-16</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of procedures and functions in RTL design</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>VHDL provide synthesizable object (Process and Component) to structure and replicate statements.
Procedures and functions are not provided for synthesis approach but for testbench development.
			</hb:Rationale>
			<hb:ShortDesc>Procedures and functions are forbidden in RTL design.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Suspicious</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_07000">
		<hb:RuleUID>STD_07000</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>3</hb:Version>
			<hb:Creation>2015-02-17</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Maximum depths of nested objects</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Nested objects limited in depth improves understanding of project and keep modules less complicated.</hb:Rationale>
			<hb:ShortDesc>Nested VHDL objects are limited in depth.</hb:ShortDesc>
			<hb:LongDesc>The depth of nested objects (entities, packages, dimensions) should be kept limited.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_07100">
		<hb:RuleUID>STD_07100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Simulation ending</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Simulation</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Limited duration for testbenches avoid useless simulation runs (beyond stimulus range) thus freeing machine resources for other designers. This allows the automatic sequencing of testbenches (during non regression tests for instance).</hb:Rationale>
			<hb:ShortDesc>The simulation duration is terminated by an automatic mechanism.</hb:ShortDesc>
			<hb:LongDesc>The simulation stop automatically without any human action in the simulator. This can be done by external scripts, event starvation (like freezing the main clocks) in the testbench.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_07100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>STD_07100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from STD_07100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>STD_07100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_07200">
		<hb:RuleUID>STD_07200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Use of procedures and functions in testbenches</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Simulation</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Testbenches are not made to be synthesized. Thus, not synthesizable VHDL features can be used inside testbenches.
Functions and procedures in testbenches ensure saving time of development. 
Moreover, the testbench is more compact because identical instructions aren't repeated, which ensures better understanding and reduces the error number.</hb:Rationale>
			<hb:ShortDesc>Procedures and functions are recommended in testbenches.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Info</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	
	<hb:Rule UID="STD_07300">
		<hb:RuleUID>STD_07300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Use of wait statement in testbenches</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Simulation</hb:Category>
			<hb:SubCategory>Miscellaneous</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Use of "wait" statement or "after" clause free the designer from maintaining a process sensitivity list while developing a testbench (sensitivity list is empty when a "wait" is used inside a process).
The testbench instructions inside a process are then sequential which is coherent with most testbench stimulation sequences.</hb:Rationale>
			<hb:ShortDesc>Testbenches are scheduled with "wait" instruction and "after" clause instead of combinational process.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Info</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from STD_07300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample >STD_07300_good</hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>	
	<hb:Rule UID="NXE_00010">
		<hb:RuleUID>NXE_00010</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Instance naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>The entity name start with prefix : "ins_" to form the isntance name.</hb:ShortDesc>
			<hb:LongDesc> The instance name must reflect the entity name it instanciate.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00020">
		<hb:RuleUID>NXE_00020</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for signal naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When a unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>Signal names are combination of lowercase alpha, numeric and underscore only.</hb:ShortDesc>
			<hb:LongDesc>In order to separate words in signal name the following convention is applied: name_of_the_signal.
The separation by uppercase (NameOfTheSignal) is not used. Only lowercase, alphanumeric and underscore are allowed.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_02600">
		<hb:RuleUID>NXE_02600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Length of signals name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_02100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Compact signal names improve readability.</hb:Rationale>
			<hb:ShortDesc>Internal signal names length is less than 20 characters.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00021">
		<hb:RuleUID>NXE_00021</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Acronym and signal naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Signal name should not be acronyms. </hb:ShortDesc>
			<hb:LongDesc>Signal names should not be acronyms composed for design and that lead to
understanding difficulties. It can be used state-of-the art acronyms or standards acronyms. e.g :
sdr, dfi, axi, …
No formal coding.
			</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00022">
		<hb:RuleUID>NXE_00022</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Signal naming relevance</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Signal name shall be relevant to help understand functionality or behavior </hb:ShortDesc>
			<hb:LongDesc>Signal names shall be relevant to help understanding functionality or behavior (no
formal coding)</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00100">
		<hb:RuleUID>NXE_00100</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of active low signal</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Identifying signal active level by reading its name allows better readability and maintainability.</hb:Rationale>
			<hb:ShortDesc>Active low signal ends by a suffix: "_n".</hb:ShortDesc>
			<hb:LongDesc> By default, all signals are considered as active high signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from NXE_00100_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>NXE_00100_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from NXE_00100_bad.vhd</hb:BadExDesc>
			<hb:BadExample>NXE_00100_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00024">
		<hb:RuleUID>NXE_00024</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of ports direction inside entity port name at pinout level</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Indicating the port direction inside the port name improves readability.</hb:Rationale>
			<hb:ShortDesc>Entity port name at pinout level uses suffix to determine the port direction.</hb:ShortDesc>
			<hb:LongDesc>Prefixes are: 
				"_i" for input port, 
				"_o" for output port, 
				"_b" for bidirectional port.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00025">
		<hb:RuleUID>NXE_00025</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Identification of registered signals</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>Identifying signal that is clock delayed of another one by reading its name improves readability.</hb:Rationale>
			<hb:ShortDesc>The suffix of a signal that is a registration of another one is: "_r".</hb:ShortDesc>
			<hb:LongDesc>The signal source is also included inside the signal name.
Thus, a signal that is clock delayed of a signal named My_Signal is My_Signal_r.
If a small number of registration of a same signal is used (less or equal to 3), SIGNAL_r can become SIGNAL_rx where x is the number of registration stage.
If a significant number of registration of a same signal is used, use an array for registration level instead of different signals.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="NXE_03601">
		<hb:RuleUID>NXE_03601</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Reset sensitive level naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_03600</hb:ParentUID>
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>In a FPGA, the reset signal is usually a high fan-out signal routed using a dedicated global signal routing track. Using both levels of the reset signal to asynchronously reset the flip-flops of the design results in the synthesis of the reset signal itself and its inverted version, which leads to the usage of 2 global dedicated routing tracks versus a single one, with one of the reset signal passing through an inverter in the FPGA fabric rendering the reset recovery timings closure harder to meet for the FPGA EDA tools.</hb:Rationale>
			<hb:ShortDesc>>Reset signal name shall be suffixed by “_n” if active LOW</hb:ShortDesc>
			<hb:LongDesc>reset signal name shall be suffixed by “_n” if active LOW, otherwise there
is no suffix. This allows the designer to connect reset signals between entities and levels.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Design</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<hb:Rule UID="NXE_00030">
		<hb:RuleUID>NXE_00030</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Convention for constant naming</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
			<hb:ShortDesc>All "constant" names must be UPPERCASE alpha numeric and with "_" separator.</hb:ShortDesc>
			<hb:LongDesc></hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Minor</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample />
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00031">
		<hb:RuleUID>NXE_00031</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Datapath elements initialization</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_03800</hb:ParentUID>
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Initialization of synchronous elements contribute to deterministic reset behaviour and simulation match between functional and Post-Place and Route.</hb:Rationale>
			<hb:ShortDesc>All datapath fliflops must be reset at least within 5 clocks.</hb:ShortDesc>
			<hb:LongDesc>This means that input pipeline fliflops shall be explicitely reset in order to propagate initialization state during reset.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00032">
		<hb:RuleUID>NXE_00032</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Non Datapath elements initialization</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_03800</hb:ParentUID>
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Initialization of synchronous elements contribute to deterministic reset behaviour and simulation match between functional and Post-Place and Route.</hb:Rationale>
			<hb:ShortDesc>All non datapath flops must be reset explicitly</hb:ShortDesc>
			<hb:LongDesc>This means that input pipeline fliflops shall be explicitely reset in order to propagate initialization state during reset.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00033">
		<hb:RuleUID>NXE_00033</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Shared data nature reset</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_03800</hb:ParentUID>
			<hb:Technology>FPGA</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Reset</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Initialization of synchronous elements contribute to deterministic reset behaviour and simulation match between functional and Post-Place and Route.</hb:Rationale>
			<hb:ShortDesc>In the same process, you mustn't have flops with reset and flops without reset</hb:ShortDesc>
			<hb:LongDesc></hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00034">
		<hb:RuleUID>NXE_00034</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Sensitivity list for synchronous processes</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Synchronous</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Synchronous process with any extra signals added to sensitivity list may become asynchronous.
Moreover, this practice risks adding combinational blocks on clock and reset trees.</hb:Rationale>
			<hb:ShortDesc>A synchronous process needs only the clock and reset signals in its sensitivity list.</hb:ShortDesc>
			<hb:LongDesc>For synchronous reset, the signal must not be declared in the sensitivity list</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00040">
		<hb:RuleUID>NXE_00040</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Sensitivity list for combinational processes </hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID>STD_05300</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The objective is to avoid latch generation at synthesis of a combinatorial process</hb:Rationale>
			<hb:ShortDesc>All input signals shall be declared in the sensitivity list of the process</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Medium</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00041">
		<hb:RuleUID>NXE_00041</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Conditional test completness</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_05500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The objective is to avoid latch generation at synthesis of a combinatorial process.</hb:Rationale>
			<hb:ShortDesc>All cases shall be explicit by either if/else statements of allcase statements</hb:ShortDesc>
			<hb:LongDesc>Use default case while not sure that all cases are covered</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00042">
		<hb:RuleUID>NXE_00042</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>latch cells</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_05500</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>Combinational</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>The objective is to avoid latch generation at synthesis of a combinatorial process.</hb:Rationale>
			<hb:ShortDesc>No latch cells shall be found in synthesized netlist file</hb:ShortDesc>
			<hb:LongDesc></hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Unpredictable</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_04600">
		<hb:RuleUID>NXE_04600</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Finite State Machine coding style</hb:Name>
			<hb:IsParent>true</hb:IsParent>
			<hb:IsSon>false</hb:IsSon>
			<hb:ParentUID xsi:nil="true" />
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
			<hb:ShortDesc>FSM are coded using an approved method.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Bug</hb:SonarType>
			<hb:SonarSeverity>Blocker</hb:SonarSeverity>
			<hb:RemediationEffort>Major</hb:RemediationEffort>
			<hb:SonarTag>User-experience</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00050">
		<hb:RuleUID>NXE_00050</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Simple state machine</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>NXE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>The objective is to avoid complex implementation and help undestanding</hb:Rationale>
			<hb:ShortDesc>You can combine flops with next state combinatorial logic in a short signal process.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00051">
		<hb:RuleUID>NXE_00051</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Release candidate</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-21</hb:Creation>
			<hb:Modified>2021-01-21</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Complex/long state machine</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>NXE_04600</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Design</hb:Category>
			<hb:SubCategory>StateMachine</hb:SubCategory>
			<hb:Severity>Note</hb:Severity>
			<hb:Rationale>The objective is to avoid complex implementation and help undestanding</hb:Rationale>
			<hb:ShortDesc>It is recommended to split the combinatorial next state logic and the current state registers into separate process blocks.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>High</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample ></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample ></hb:BadExample>
			<hb:FigureDesc></hb:FigureDesc>
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>

	<!-- #############################################  -->
	<!-- Rules below are copied pasterd from CNE ruleset-->
	<!-- #############################################  -->

	<hb:Rule UID="NXE_00200">
		<hb:RuleUID>NXE_00200</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of frequency in clock name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Clock frequency can be changed during the development (for power consumption reason...). In such a case, if the clock signal name contains frequency value, it can lead to major code modification to update this value, or lead to misunderstanding.
			</hb:Rationale>
			<hb:ShortDesc>The clock signal name does not contain the clock frequency value.</hb:ShortDesc>
			<hb:LongDesc>The clock relation for derivative clock, like mainclk_div2 for mainclk with a frequency divided by two, is a good way to show relation between clocks.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from NXE_00200_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>NXE_00200_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from NXE_00200_bad.vhd</hb:BadExDesc>
			<hb:BadExample>NXE_00200_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00300">
		<hb:RuleUID>NXE_00300</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>6</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Unsuitability of pin number in signal name</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Board layout optimization can lead to FPGA/ASIC pins swapping. ASIC/FPGA development often needs several targets with pinout mismatching. In such a case, if the VHDL code contains signal with FPGA/ASIC pins number information, it can lead to major code modification to update this value or lead to misunderstanding.</hb:Rationale>
			<hb:ShortDesc>Signal name does not contain FPGA/ASIC pin number value.</hb:ShortDesc>
			<hb:LongDesc>No additional information.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc>Extracted from NXE_00300_good.vhd</hb:GoodExDesc>
			<hb:GoodExample>NXE_00300_good</hb:GoodExample>
			<hb:BadExDesc>Extracted from NXE_00300_bad.vhd</hb:BadExDesc>
			<hb:BadExample>NXE_00300_bad</hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00301">
		<hb:RuleUID>NXE_00301</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Validated</hb:Status>
			<hb:Engine>None</hb:Engine>
			<hb:Version>1</hb:Version>
			<hb:Creation>2021-01-26</hb:Creation>
			<hb:Modified>2021-01-26</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiple clk-reset pair</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>Board layout optimization can lead to FPGA/ASIC pins swapping. ASIC/FPGA development often needs several targets with pinout mismatching. In such a case, if the VHDL code contains signal with FPGA/ASIC pins number information, it can lead to major code modification to update this value or lead to misunderstanding.</hb:Rationale>
			<hb:ShortDesc>The extension name for multiple clock/reset pair should be identical.</hb:ShortDesc>
			<hb:LongDesc>e.g: { arst_dfi_i , clk_dfi_i } if related to dfi clock domain, and { arst_axi_i , clk_axi_i } is related to AXI
clock domain.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Critical</hb:SonarSeverity>
			<hb:RemediationEffort>Easy</hb:RemediationEffort>
			<hb:SonarTag>Bad-practice</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc></hb:GoodExDesc>
			<hb:GoodExample></hb:GoodExample>
			<hb:BadExDesc></hb:BadExDesc>
			<hb:BadExample></hb:BadExample>
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_00901">
		<hb:RuleUID>NXE_00901</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>5</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>File name of an entity</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_00900</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>Naming</hb:SubCategory>
			<hb:Severity>Minor</hb:Severity>
			<hb:Rationale>The match between file name and entity name improves the search for an entity inside a project.</hb:Rationale>
			<hb:ShortDesc>The file name for an entity VHDL file match exactly the entity name.</hb:ShortDesc>
			<hb:LongDesc>The file name shall match exactly the entity name to avoid confusion from others
entities that could have identical names.</hb:LongDesc>
		</hb:RuleContent>
		<hb:Sonarqube>
			<hb:SonarType>Code_Smell</hb:SonarType>
			<hb:SonarSeverity>Major</hb:SonarSeverity>
			<hb:RemediationEffort>Trivial</hb:RemediationEffort>
			<hb:SonarTag>Convention</hb:SonarTag>
		</hb:Sonarqube>
		<hb:RuleDesc>
			<hb:GoodExDesc />
			<hb:GoodExample />
			<hb:BadExDesc />
			<hb:BadExample />
			<hb:FigureDesc />
			<hb:Figure />
		</hb:RuleDesc>
	</hb:Rule>
	<hb:Rule UID="NXE_01101">
		<hb:RuleUID>NXE_01101</hb:RuleUID>
		<hb:RuleHist>
			<hb:Status>Implemented</hb:Status>
			<hb:Engine>ZamiaCad</hb:Engine>
			<hb:Version>4</hb:Version>
			<hb:Creation>2014-09-30</hb:Creation>
			<hb:Modified>2020-04-23</hb:Modified>
			<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
		</hb:RuleHist>
		<hb:RuleContent>
			<hb:Name>Multiple architecture for entities</hb:Name>
			<hb:IsParent>false</hb:IsParent>
			<hb:IsSon>true</hb:IsSon>
			<hb:ParentUID>STD_01100</hb:ParentUID>
			<hb:Technology>VLSI</hb:Technology>
			<hb:ApplicationFields>General</hb:ApplicationFields>
			<hb:Category>Formatting</hb:Category>
			<hb:SubCategory>FileStructure</hb:SubCategory>
			<hb:Severity>Major</hb:Severity>
			<hb:Rationale>When the design is synthesized, only one architecture is synthesized for each synthesized entity. Including only one architecture per file reduces a potential architecture selection error at synthesis level.</hb:Rationale>
			<hb:ShortDesc>Each architecture of an entity should be implemented in a separate file.</hb:ShortDesc>
			<hb:LongDesc>If the design of a given entity has multiple architecture names (e.g: “rtl”,
“simu”), each architecture shall be implemented in a separate file named with the following
convention:
				entity_arch_arch_name.vhd (e.g: ddr_fsm_arch_rtl.vhd)</hb:LongDesc>
				</hb:RuleContent>
				<hb:Sonarqube>
					<hb:SonarType>Code_Smell</hb:SonarType>
					<hb:SonarSeverity>Major</hb:SonarSeverity>
					<hb:RemediationEffort>Easy</hb:RemediationEffort>
					<hb:SonarTag>Design</hb:SonarTag>
				</hb:Sonarqube>
				<hb:RuleDesc>
					<hb:GoodExDesc></hb:GoodExDesc>
					<hb:GoodExample ></hb:GoodExample>
					<hb:BadExDesc></hb:BadExDesc>
					<hb:BadExample ></hb:BadExample>
					<hb:FigureDesc />
					<hb:Figure />
				</hb:RuleDesc>
</hb:Rule>
				<hb:Rule UID="NXE_00400">
					<hb:RuleUID>NXE_00400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Name of testbench entity</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Identification (suffix or prefix) for testbench entity improves the identification of which entity is the testbench of which entity.</hb:Rationale>
						<hb:ShortDesc>The suffix of testbench entity name is "_tb".</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>Bad-practice</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>





				<hb:Rule UID="NXE_00700">
					<hb:RuleUID>NXE_00700</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Convention for process naming</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
						<hb:ShortDesc>Each word that composes a process name are clearly identified with an underscore.</hb:ShortDesc>
						<hb:LongDesc>In order to separate words in a process name the following convention is applied: Name_Of_The_Process.
The separation by uppercase (NameOfTheProcess) is not used.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc></hb:GoodExDesc>
						<hb:GoodExample />
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_00800">
					<hb:RuleUID>NXE_00800</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Convention for generic ports</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
						<hb:ShortDesc>Each words that composes a generic port name are clearly identified with an underscore.</hb:ShortDesc>
						<hb:LongDesc>In order to separate words in a generic port name the following convention is applied: Name_Of_The_Generic.
The separation by uppercase (NameOfTheGeneric) is not used.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc></hb:GoodExDesc>
						<hb:GoodExample />
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_00900">
					<hb:RuleUID>NXE_00900</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Convention for custom type naming</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.</hb:Rationale>
						<hb:ShortDesc>Each word that composes a custom type name are clearly identified with an underscore.</hb:ShortDesc>
						<hb:LongDesc>In order to separate word in a custom type name the following convention is applied: Name_Of_The_Customtype.
The separation by uppercase (NameOfTheCustomtype) is not used.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc></hb:GoodExDesc>
						<hb:GoodExample />
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_01000">
					<hb:RuleUID>NXE_01000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of variable name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>When an unique naming convention is applied to the whole source files from the design, then the resulting code is homogenized which increases readability.
With this convention, designer will be able to track synthesis of variable and especially identify if a variable created some unwanted flip-flops.</hb:Rationale>
						<hb:ShortDesc>The name of a variable use "v_" prefix.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01000_good.vhd</hb:GoodExDesc>
						<hb:GoodExample>NXE_01000_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01000_bad.vhd</hb:BadExDesc>
						<hb:BadExample>NXE_01000_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
					<hb:RuleParams>
						<hb:StringParam>
							<hb:ParamID>P1</hb:ParamID>
							<hb:Position>Prefix</hb:Position>
							<hb:Value>v_</hb:Value>
						</hb:StringParam>
					</hb:RuleParams>
				</hb:Rule>

				<hb:Rule UID="NXE_01200">
					<hb:RuleUID>NXE_01200</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of process label</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Differentiating process label from other VHDL object improves readability.</hb:Rationale>
						<hb:ShortDesc>Process label name starts by a prefix: "P_".</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01200_good.vhd</hb:GoodExDesc>
						<hb:GoodExample>NXE_01200_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01200_bad.vhd</hb:BadExDesc>
						<hb:BadExample>NXE_01200_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
					<hb:RuleParams>
						<hb:StringParam>
							<hb:ParamID>P1</hb:ParamID>
							<hb:Position>Prefix</hb:Position>
							<hb:Value>p_</hb:Value>
						</hb:StringParam>
					</hb:RuleParams>
				</hb:Rule>


				<hb:Rule UID="NXE_01400">
					<hb:RuleUID>NXE_01400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of generic port name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Differentiating generic port object from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
						<hb:ShortDesc>Generic port name starts by a prefix: "g_".
						</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01400_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_01400_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01400_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_01400_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_01500">
					<hb:RuleUID>NXE_01500</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of custom type name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Differentiating custom type from other VHDL objects name allows better readability and maintainability.</hb:Rationale>
						<hb:ShortDesc>Custom type name starts by a prefix: "t_".</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01500_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_01500_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01500_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_01500_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>



				<hb:Rule UID="NXE_01600">
					<hb:RuleUID>NXE_01600</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of package element</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>A well defined prefix for package name improves identification of the origin of the element.</hb:Rationale>
						<hb:ShortDesc>The prefix of package element name is "pkg_".</hb:ShortDesc>
						<hb:LongDesc>Package elements considered are: the package name itself and all VHDL object declared and defined inside the package.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01600_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_01600_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01600_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_01600_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
					<hb:RuleParams>
						<hb:StringParam>
							<hb:ParamID>P1</hb:ParamID>
							<hb:Position>Prefix</hb:Position>
							<hb:Value>pkg_</hb:Value>
						</hb:StringParam>
					</hb:RuleParams>
				</hb:Rule>

				<hb:Rule UID="NXE_01700">
					<hb:RuleUID>NXE_01700</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of rising edge detection signal</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
						<hb:ShortDesc>The suffix of a signal that represents a rising edge of another one is: "_re".</hb:ShortDesc>
						<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a rising edge of a signal named My_Sig is My_Sig_re.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01700_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_01700_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01700_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_01700_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_01800">
					<hb:RuleUID>NXE_01800</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of falling edge detection signal</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Identifying signal that represents the edge detection of another one by reading its name improves readability.</hb:Rationale>
						<hb:ShortDesc>The suffix of a signal that represents a falling edge of another one is: "_fe".</hb:ShortDesc>
						<hb:LongDesc>The detected signal is also included inside the signal name. 
Thus, a signal that represents a falling edge of a signal named My_Sig is My_Sig_fe.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_01800_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_01800_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_01800_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_01800_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02000">
					<hb:RuleUID>NXE_02000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>Yosys-ghdl</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Identification of Finite State Machine</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Identifying Finite State Machine (FSM) improves analysis of synthesis log files.</hb:Rationale>
						<hb:ShortDesc>FSM signal name uses prefix : "sm_".</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_02000_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_02000_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_02000_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_02000_bad</hb:BadExample>
						<hb:FigureDesc></hb:FigureDesc>
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_02100">
					<hb:RuleUID>NXE_02100</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Name of RTL architectures</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Meaningful architecture name helps managing simulation and implementation sources.</hb:Rationale>
						<hb:ShortDesc>VHDL architecture are of type Behavioral, RTL or Simulation.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_02100_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_02100_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_02100_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_02100_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
					<hb:RuleParams>
						<hb:StringParam>
							<hb:ParamID>P1</hb:ParamID>
							<hb:Position>Contain</hb:Position>
							<hb:Value>Behavioral</hb:Value>
						</hb:StringParam>
						<hb:StringParam>
							<hb:ParamID>P2</hb:ParamID>
							<hb:Position>Contain</hb:Position>
							<hb:Value>RTL</hb:Value>
						</hb:StringParam>
						<hb:StringParam>
							<hb:ParamID>P3</hb:ParamID>
							<hb:Position>Contain</hb:Position>
							<hb:Value>Simulation</hb:Value>
						</hb:StringParam>
					</hb:RuleParams>
				</hb:Rule>

				<hb:Rule UID="NXE_02200">
					<hb:RuleUID>NXE_02200</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Name of configuration entity</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00800</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Identification of configuration entity name improves the identification of this file inside the project.</hb:Rationale>
						<hb:ShortDesc>The suffix of configuration entity name is "_cfg".</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02300">
					<hb:RuleUID>NXE_02300</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Preservation of clock name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00700</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. </hb:Rationale>
						<hb:ShortDesc>Clock signal keeps its name through hierarchy levels.</hb:ShortDesc>
						<hb:LongDesc>Clock signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the clock name the same between entity ports within a project.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Bad-practice</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_02300_good.vhd</hb:GoodExDesc>
						<hb:GoodExample>NXE_02300_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_02300_bad.vhd</hb:BadExDesc>
						<hb:BadExample>NXE_02300_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02400">
					<hb:RuleUID>NXE_02400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Preservation of reset name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_00700</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>Naming</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Change of name through affectation of a signal to another one without any logical modification can lead to simulation mismatch as this affectation take an additional simulator tick to be processed. Moreover, renaming a reset signal can lead to break the reset tree.</hb:Rationale>
						<hb:ShortDesc>Reset signal keeps its name through hierarchy levels.</hb:ShortDesc>
						<hb:LongDesc>Reset signal is not renamed inside an entity through signal affectation. 
It is also best practice to keep the reset name the same between entity ports within a project.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>Bad-practice</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_02400_good.vhd</hb:GoodExDesc>
						<hb:GoodExample>NXE_02400_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_02400_bad.vhd</hb:BadExDesc>
						<hb:BadExample>NXE_02400_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02500">
					<hb:RuleUID>NXE_02500</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Length of entities name</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>FileStructure</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Compact entity names ensures compact tree structure which improves readability inside the different software.</hb:Rationale>
						<hb:ShortDesc>Hierarchical level entity's names length is less than 20 characters.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02700">
					<hb:RuleUID>NXE_02700</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Number of lines in file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02100</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Formatting</hb:Category>
						<hb:SubCategory>FileStructure</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Compact VHDL files reduce the complexity of the function defined and thus the risk of a bug.
Too many lines inside a VHDL file might depict a badly designed module or an architecture definition problem.</hb:Rationale>
						<hb:ShortDesc>The HDL architectural code have a limited number of lines set to 450.</hb:ShortDesc>
						<hb:LongDesc>HDL architectural code are the VHDL statements included between the begin statement and the end statement of the architecture. 
The definition area (for signals, constants components...) is not included in this area, nor are the comments lines.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Complex</hb:RemediationEffort>
						<hb:SonarTag>Suspicious</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_02800">
					<hb:RuleUID>NXE_02800</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Software VHDL generator in header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02400</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Inserting information about the automatic tool used for VHDL file generation improves code review (as the reviewer doesn't want to check automatically generated code if not modified by hand) and reusability (as it can secure which software version has been used to create the file).</hb:Rationale>
						<hb:ShortDesc>Header of file includes references to the automatic VHDL files generator.</hb:ShortDesc>
						<hb:LongDesc>When a VHDL code file is generated automatically by a software then the header of this file includes information about the software used and its version.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_02900">
					<hb:RuleUID>NXE_02900</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>File name in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02400</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>File name in the header ensures that the header really applies to the current file and is not a copy/paste header.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the name of the file.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03000">
					<hb:RuleUID>NXE_03000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Creation date in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02400</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Creation date in the header of file improves traceability.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the file creation date.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03100">
					<hb:RuleUID>NXE_03100</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Project name in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02400</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Project name in the header of file improves traceability.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the targeted project name.</hb:ShortDesc>
						<hb:LongDesc>The project name could be an ID or a code name for critical projects.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03200">
					<hb:RuleUID>NXE_03200</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Author in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02400</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Author in the header of file improves traceability.</hb:Rationale>
						<hb:ShortDesc>Header of file includes author name of file.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03300">
					<hb:RuleUID>NXE_03300</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Functional description in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02500</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Functional description in the header of file allows peer reviewer to gain a minimum knowledge of the functionality without having to seek for design document.</hb:Rationale>
						<hb:ShortDesc>Header of file includes a brief functional description of the entity.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03400">
					<hb:RuleUID>NXE_03400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Naming convention in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02500</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Naming convention summary in the header of file improves the understanding of the code by the peer reviewer.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the commonly used naming convention.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03500">
					<hb:RuleUID>NXE_03500</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Functional limitation in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02500</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Functional limitation information reduces the possibility of introducing a bug when doing an update of the VHDL code.</hb:Rationale>
						<hb:ShortDesc>Header of file includes functional limitations of the entity.</hb:ShortDesc>
						<hb:LongDesc>The limitation could be an assumption taken by the designer regarding an unclear specification that leads to a specific implementation.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Complex</hb:RemediationEffort>
						<hb:SonarTag>Design</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03600">
					<hb:RuleUID>NXE_03600</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Current version number in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Current version of file in the header of the file allows traceability and reuse.</hb:Rationale>
						<hb:ShortDesc>Header of file includes current version of file.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_03700">
					<hb:RuleUID>NXE_03700</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Author of modification(s) in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Listing of the author of the modification allows matching of author coding style profile with the produced VHDL during code analysis.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the name of the author of the modification(s).</hb:ShortDesc>
						<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03800">
					<hb:RuleUID>NXE_03800</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Version history in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
						<hb:ShortDesc>Header of file includes current and previous file version ID and date.</hb:ShortDesc>
						<hb:LongDesc>The header of the file includes a version tag (like number, letters..) with a modification date that identifies the current and previous version of the code.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_03900">
					<hb:RuleUID>NXE_03900</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Reason(s) of modification(s) in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Reason(s) of modification(s) in the header of file improves traceability and reuse.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the reason(s) of the modification(s).</hb:ShortDesc>
						<hb:LongDesc>This information is added for each new version of the file. The reason could be, for example, a change in the specification document, a bug correction, an improvement...</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04000">
					<hb:RuleUID>NXE_04000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Functional impact(s) of modifications in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Functional impact(s) in the versioning of file improves traceability.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the functional impacts of a modification.</hb:ShortDesc>
						<hb:LongDesc>This information is added for each new version of the file. The functional impact could be, for example, a change of output signal activation from edge to level, a change of compatible technology (from Xilinx to Atmel FPGAs)...</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Medium</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04100">
					<hb:RuleUID>NXE_04100</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Functional description of modifications in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02200</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Revision control improves IP integration time.
Understanding the last modifications allows integrator to know if a bug was corrected or if the modification will produce a problem.</hb:Rationale>
						<hb:ShortDesc>Header of file includes a functional description of modifications.</hb:ShortDesc>
						<hb:LongDesc>This information is added for each new version of the file.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04200">
					<hb:RuleUID>NXE_04200</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Applicable license in header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02300</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Writing license in the header informs a third party reader what can be done with the file.</hb:Rationale>
						<hb:ShortDesc>Header of file includes a license.</hb:ShortDesc>
						<hb:LongDesc>The license could be a GNU public one, all right reserved to the company owner or any additional information regarding the reuse, the transfer of the file by a third party to an other one.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04300">
					<hb:RuleUID>NXE_04300</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Company coding in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02300</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the company name developing the code.</hb:ShortDesc>
						<hb:LongDesc>If the VHDL is developed by a subcontractor, the name of this company will be written in the header.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Trivial</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04400">
					<hb:RuleUID>NXE_04400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2014-12-01</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Company owner of code in the header of file</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_02300</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Traceability</hb:Category>
						<hb:SubCategory>Versioning</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>This information improves understanding of the project context.</hb:Rationale>
						<hb:ShortDesc>Header of file includes the company for which the code is developed.</hb:ShortDesc>
						<hb:LongDesc>The name of the company responsible for this FPGA is written in the header.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag>User-experience</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_04500">
					<hb:RuleUID>NXE_04500</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>4</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Reset registers</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>false</hb:IsSon>
						<hb:ParentUID xsi:nil="true" />
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Reset</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>Registers which are not reset, will cause Post layout simulation mismatch. Thus these signals will have to be handled with a special attention. 
Isolating them from initialized signal improves identification of these signals while reading VHDL code, or within the netlist (if label are used for the process).</hb:Rationale>
						<hb:ShortDesc>Do not assign in the same process initialized signals with non-initialized ones.</hb:ShortDesc>
						<hb:LongDesc>Signal registers which are not initialized (by a reset signal) within a synchronous process are not located in the same process as initialized register signals.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>High</hb:RemediationEffort>
						<hb:SonarTag>Design</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_04500_good.vhd</hb:GoodExDesc>
						<hb:GoodExample>NXE_04500_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_04500_bad.vhd</hb:BadExDesc>
						<hb:BadExample>NXE_04500_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>


				<hb:Rule UID="NXE_04700">
					<hb:RuleUID>NXE_04700</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Finite State Machine single process based</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>NXE_04600</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>StateMachine</hb:SubCategory>
						<hb:Severity>Note</hb:Severity>
						<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
						<hb:ShortDesc>FSM coding style use the one synchronous process method.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>High</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_04700_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_04700_good</hb:GoodExample>
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample ></hb:BadExample>
						<hb:FigureDesc></hb:FigureDesc>
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_04800">
					<hb:RuleUID>NXE_04800</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Finite State Machine two processes based</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>NXE_04600</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>StateMachine</hb:SubCategory>
						<hb:Severity>Note</hb:Severity>
						<hb:Rationale>State machines are identified by synthesis tools. These tools do not understand all the exotic ways of coding state machines. In order to get a real state machine use an approved state machine coding style.</hb:Rationale>
						<hb:ShortDesc>FSM coding style use the two processes method.</hb:ShortDesc>
						<hb:LongDesc>FSM coding style use one synchronous process for state registration and one asynchronous process for states and outputs assertion.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Major</hb:SonarSeverity>
						<hb:RemediationEffort>High</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_04800_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_04800_good</hb:GoodExample>
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample ></hb:BadExample>
						<hb:FigureDesc></hb:FigureDesc>
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_04900">
					<hb:RuleUID>NXE_04900</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>ZamiaCad</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Use of clock signal</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>false</hb:IsSon>
						<hb:ParentUID xsi:nil="true" />
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Clocking</hb:SubCategory>
						<hb:Severity>Major</hb:Severity>
						<hb:Rationale>Clock is one of the most critical signal in the design. Use of a clock signal for other input than the dedicated logic one can lead to moving the clock signal out of its low skew dedicated route. This can lead to timing mismatch on the device.</hb:Rationale>
						<hb:ShortDesc>Clock signal is not used inside combinational function like multiplexor or digital gate.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Blocker</hb:SonarSeverity>
						<hb:RemediationEffort>High</hb:RemediationEffort>
						<hb:SonarTag>Unpredictable</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_04900_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_04900_good</hb:GoodExample>
						<hb:BadExDesc>Extracted from NXE_04900_bad.vhd</hb:BadExDesc>
						<hb:BadExample >NXE_04900_bad</hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_05000">
					<hb:RuleUID>NXE_05000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>5</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Multiplexor coding style</hb:Name>
						<hb:IsParent>true</hb:IsParent>
						<hb:IsSon>false</hb:IsSon>
						<hb:ParentUID xsi:nil="true" />
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Combinational</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
						<hb:ShortDesc>Multiplexor are coded using an approved method.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Design</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_05100">
					<hb:RuleUID>NXE_05100</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Multiplexor single process based</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>NXE_05000</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Combinational</hb:SubCategory>
						<hb:Severity>Note</hb:Severity>
						<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
						<hb:ShortDesc>Multiplexor coding style uses an asynchronous process.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_05100_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_05100_good</hb:GoodExample>
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample />
						<hb:FigureDesc></hb:FigureDesc>
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_05200">
					<hb:RuleUID>NXE_05200</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>6</hb:Version>
						<hb:Creation>2014-09-30</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Multiplexor direct assertion based</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>NXE_05000</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Combinational</hb:SubCategory>
						<hb:Severity>Note</hb:Severity>
						<hb:Rationale>A badly written multiplexor can lead to latches and mismatches between simulation and the device.</hb:Rationale>
						<hb:ShortDesc>Multiplexor coding style uses direct assertions.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Major</hb:RemediationEffort>
						<hb:SonarTag>Convention</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc>Extracted from NXE_05200_good.vhd</hb:GoodExDesc>
						<hb:GoodExample >NXE_05200_good</hb:GoodExample>
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				<hb:Rule UID="NXE_05300">
					<hb:RuleUID>NXE_05300</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Hierarchical level of entity</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_07000</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Miscellaneous</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>A limited hierarchical levels between the top and the lowest level entity improves understanding of project.</hb:Rationale>
						<hb:ShortDesc>The number of nested entities should not be superior to 10.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Complex</hb:RemediationEffort>
						<hb:SonarTag>Suspicious</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_05400">
					<hb:RuleUID>NXE_05400</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Number of nested packages</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_07000</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Miscellaneous</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>A limited number of nested packages improves understanding of project.</hb:Rationale>
						<hb:ShortDesc>The number of nested packages should not be superior to 3.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>Complex</hb:RemediationEffort>
						<hb:SonarTag>Suspicious</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>

				<hb:Rule UID="NXE_05500">
					<hb:RuleUID>NXE_05500</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Validated</hb:Status>
						<hb:Engine>None</hb:Engine>
						<hb:Version>3</hb:Version>
						<hb:Creation>2015-02-17</hb:Creation>
						<hb:Modified>2020-04-23</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Dimension of array</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>true</hb:IsSon>
						<hb:ParentUID>STD_07000</hb:ParentUID>
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Miscellaneous</hb:SubCategory>
						<hb:Severity>Minor</hb:Severity>
						<hb:Rationale>A limited number of dimension in array reduces complexity and improves readability.</hb:Rationale>
						<hb:ShortDesc>The use of arrays with dimension greater than 2 is forbidden.</hb:ShortDesc>
						<hb:LongDesc>No additional information.</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Bug</hb:SonarType>
						<hb:SonarSeverity>Critical</hb:SonarSeverity>
						<hb:RemediationEffort>High</hb:RemediationEffort>
						<hb:SonarTag>Suspicious</hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc />
						<hb:GoodExample />
						<hb:BadExDesc />
						<hb:BadExample />
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
				
				<hb:Rule UID="GHD_00000">
					<hb:RuleUID>GHD_00000</hb:RuleUID>
					<hb:RuleHist>
						<hb:Status>Implemented</hb:Status>
						<hb:Engine>Yosys-ghdl</hb:Engine>
						<hb:Version>1</hb:Version>
						<hb:Creation>2021-09-29</hb:Creation>
						<hb:Modified>2021-09-29</hb:Modified>
						<hb:Revision>Not used anymore.See Git logs.</hb:Revision>
					</hb:RuleHist>
					<hb:RuleContent>
						<hb:Name>Ghdl synthesis messages</hb:Name>
						<hb:IsParent>false</hb:IsParent>
						<hb:IsSon>false</hb:IsSon>
						<hb:ParentUID xsi:nil="true" />
						<hb:Technology>VLSI</hb:Technology>
						<hb:ApplicationFields>General</hb:ApplicationFields>
						<hb:Category>Design</hb:Category>
						<hb:SubCategory>Miscellaneous</hb:SubCategory>
						<hb:Severity>Note</hb:Severity>
						<hb:Rationale>Ghdl -s command may raise error and warning messages</hb:Rationale>
						<hb:ShortDesc>This rule reports all ghdl synthesis error and warning messages</hb:ShortDesc>
						<hb:LongDesc>This rule reports all ghdl synthesis error and warning messages</hb:LongDesc>
					</hb:RuleContent>
					<hb:Sonarqube>
						<hb:SonarType>Code_Smell</hb:SonarType>
						<hb:SonarSeverity>Minor</hb:SonarSeverity>
						<hb:RemediationEffort>Easy</hb:RemediationEffort>
						<hb:SonarTag></hb:SonarTag>
					</hb:Sonarqube>
					<hb:RuleDesc>
						<hb:GoodExDesc></hb:GoodExDesc>
						<hb:GoodExample ></hb:GoodExample>
						<hb:BadExDesc></hb:BadExDesc>
						<hb:BadExample ></hb:BadExample>
						<hb:FigureDesc />
						<hb:Figure />
					</hb:RuleDesc>
				</hb:Rule>
					
	<hb:RuleSetHist>
		<hb:Version>6</hb:Version>
		<hb:Creation>2014-09-30</hb:Creation>
		<hb:Modified>2020-08-27</hb:Modified>
		<hb:Revision>V1 : 2014-11-13 : Creation.
V2   : 2014-12-01 : Update of rules with remarks from partners about V1 revision, rules have been transferred to CNES handbook.
V3   : 2015-02-17 : Update of rules with remarks from partners about V2 revision
V4   : 2015-07-16 : Update of rules with examples
V4.1 : 2015-11-18 : Correct several data from remarks
V5   : 2017-11-24 : Creation of Sonarqube data and update of some status
V6   : 2020-08-27 : Update by merging latest handbook_STD.xml and handbook_CNE.xml
		</hb:Revision>
	</hb:RuleSetHist>	
</hb:RuleSet>
